/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ken-yo' at '16/08/08 7:34' with Gradle 2.14.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group = 'com.github.poad'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// JavaクラスとSQLファイルの出力先ディレクトリを同じにする
processResources.destinationDir = compileJava.destinationDir
// コンパイルより前にSQLファイルを出力先ディレクトリにコピーするために依存関係を逆転する
compileJava.dependsOn processResources

def aptGeneratePath = 'build/apt_generated'
compileJava.options.compilerArgs = ['-s', aptGeneratePath]
new File(aptGeneratePath).mkdirs()

ext.dependentVersion = '2.17.0'
ext.dependentJUnitPlatforVersion = '1.0.0'
ext.dependentJUnitJupiterVersion = '5.0.0'
ext.dependentJerseyVersion = '2.26'
ext.dependentJettyVersion = '9.4.6.v20170531'

// In this section you declare the dependencies for your production and test code
dependencies {
    compile "org.seasar.doma:doma:${dependentVersion}"
    compile 'com.zaxxer:HikariCP:2.4.7'

    // https://mvnrepository.com/artifact/javax.ejb/javax.ejb-api
    compile 'javax.ejb:javax.ejb-api:3.2'



    compile "org.eclipse.jetty:jetty-server:${dependentJettyVersion}"
    compile "org.eclipse.jetty:jetty-webapp:${dependentJettyVersion}"

    compile "org.glassfish.jersey.media:jersey-media-json-jackson:${dependentJerseyVersion}"
    compile "org.glassfish.jersey.media:jersey-media-json-processing:${dependentJerseyVersion}"

    compile "org.glassfish.jersey.connectors:jersey-jetty-connector:${dependentJerseyVersion}"
    compile "org.glassfish.jersey.containers:jersey-container-servlet-core:${dependentJerseyVersion}"
    compile "org.glassfish.jersey.inject:jersey-hk2:${dependentJerseyVersion}"

    compile "org.glassfish.jersey.ext.cdi:jersey-weld2-se:${dependentJerseyVersion}"
    compile "org.glassfish.jersey.ext.cdi:jersey-cdi1x:${dependentJerseyVersion}"

    compile "org.slf4j:slf4j-api:1.7.25"
    compile "org.apache.logging.log4j:log4j-api:2.9.0"
    compile "org.apache.logging.log4j:log4j-core:2.9.0"
    compile "org.apache.logging.log4j:log4j-web:2.9.0"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:2.9.0"

    testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-bundle:${dependentJerseyVersion}"
    testCompile "org.glassfish.jersey.test-framework:jersey-test-framework-util:${dependentJerseyVersion}"

    testCompile "org.junit.jupiter:junit-jupiter-api:${dependentJUnitJupiterVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-engine:${dependentJUnitJupiterVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-migrationsupport:${dependentJUnitJupiterVersion}"

    testCompile "org.junit.platform:junit-platform-commons:${dependentJUnitPlatforVersion}"
    testCompile "org.junit.platform:junit-platform-gradle-plugin:${dependentJUnitPlatforVersion}"

    runtime 'mysql:mysql-connector-java:6.0.3'
}
