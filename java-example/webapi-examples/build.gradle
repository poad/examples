/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ken-yo' at '15/12/23 22:33' with Gradle 2.9
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */
// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'idea'
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    }
}

apply plugin: "io.spring.dependency-management"


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

buildscript {
    repositories {
        mavenCentral()
    }
}

tasks.withType(JavaCompile) {
    doFirst {
        sourceCompatibility = 10
        targetCompatibility = 10
        options.compilerArgs = [
                '--add-modules', 'java.se.ee',
                '--add-modules', 'java.activation',
                '--add-modules', 'java.xml.ws.annotation',
                '--add-modules', 'java.xml.bind',
                '--add-exports', 'java.xml.bind/com.sun.istack.internal=ALL-UNNAMED'
        ]
    }
}

tasks.withType(Test) {
    doFirst {
        jvmArgs = [
                '--add-modules', 'java.se.ee',
                '--add-modules', 'java.activation',
                '--add-modules', 'java.xml.ws.annotation',
                '--add-modules', 'java.xml.bind',
                '-Djava.locale.providers=COMPAT,SPI',
        ]
    }
}


dependencyManagement {
    imports {
        mavenBom "org.jdbi:jdbi-bom:${jdbiVersion}"
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:jcl-over-slf4j:' + slf4jVersion

    compile "org.jdbi:jdbi3-core:${jdbiVersion}"
    compile "org.jdbi:jdbi3-sqlobject:${jdbiVersion}"
    compile "org.jdbi:jdbi3-vavr:${jdbiVersion}"
    compile "org.jdbi:jdbi3-guava:${jdbiVersion}"
    compile "org.jdbi:jdbi3-jodatime2:${jdbiVersion}"

    compile 'org.eclipse.jetty:jetty-server:' + jettyVersion
    compile 'org.eclipse.jetty:jetty-servlet:' + jettyVersion

    compile 'org.glassfish.jersey.core:jersey-server:' + jerseyVersion

    compile 'org.glassfish.jersey.containers:jersey-container-jetty-http:' + jerseyVersion

    compile 'org.glassfish.jersey.inject:jersey-hk2:' + jerseyVersion

    compile 'org.glassfish.jersey.containers:jersey-container-jetty-http:' + jerseyVersion
    compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:' + jerseyVersion
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:' + jerseyVersion

    compile 'com.zaxxer:HikariCP:' + hikariCpVersion
    compile 'mysql:mysql-connector-java:' + mysqlConnectorVersion

}

