/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ken-yo' at '15/11/08 7:04' with Gradle 2.6
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.6/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'idea'

group = 'com.github.poad'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

ext {
    jettyVersionOfDropwizard = '9.4.7.v20170914'
    jettyVersion = '9.4.7.v20170914'

    dropwizardVersion = '1.2.0'
    jacksonVersion = '2.9.1'
    vertxVersion = '3.5.0'

    jdbiVersion = '2.78'
    hikariCpVersion = '2.7.2'
    h2Version = '1.4.196'
    jtaApiVersion = '1.2'
    hibernateJpa2_1Version = '1.0.0.Final'
    mysqlConnectorVersion = '6.0.6'

    flywayVersion = '4.2.0'

    flywayPluginVersion = flywayVersion
    springBootVersion = '1.5.8.RELEASE'
    springLoadedVersion = '1.2.8.RELEASE'

    eclipseLinkVersion = '2.7.0'
    transactionApiVersion = '1.2'

    slf4jVersion = '1.7.25'

    log4jVersion = '2.9.1'

    dbUnitVersion = '2.5.4'

    cucumberVersion = '2.0.1'

    junitVersion = '4.12'
    junit4Version        = '4.12'
    junitVintageVersion  = '4.12.0'
    junitPlatformVersion = '1.0.0'
    junitJupiterVersion  = '5.0.1'
}

// In this section you declare the dependencies for your production and test code
dependencies {
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.junit.platform.gradle.plugin'

    sourceCompatibility = 9
    targetCompatibility = 9

    dependencies {
        compile 'org.slf4j:slf4j-api:' + slf4jVersion

        // JUnit Jupiter API and TestEngine implementation
        testCompile "org.junit.jupiter:junit-jupiter-api:" + junitJupiterVersion
        testRuntime "org.junit.jupiter:junit-jupiter-engine:" + junitJupiterVersion

        // If you also want to support JUnit 3 and JUnit 4 tests
        testCompile "junit:junit:" + junit4Version
        testRuntime "org.junit.vintage:junit-vintage-engine:" + junitVintageVersion

        testRuntime "org.apache.logging.log4j:log4j-core:" + log4jVersion
        testRuntime "org.apache.logging.log4j:log4j-jul:" + log4jVersion

        // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
        testRuntime "org.junit.platform:junit-platform-launcher:" + junitPlatformVersion
    }

    test {
        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        }
    }

}

