/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ken-yo' at '15/11/08 7:04' with Gradle 2.6
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.6/userguide/tutorial_java_projects.html
 */
plugins {
    id "org.flywaydb.flyway" version '6.0.7' apply false
}


ext {
    jettyVersionOfDropwizard = '9.4.18.v20190429'
    jettyVersion = '9.4.22.v20191022'

    dropwizardVersion = '1.3.16'
    jacksonVersion = '2.10.0'
    vertxVersion = '3.8.3'

    jdbiVersion = '3.10.1'
    hikariCpVersion = '3.4.1'
    h2Version = '1.4.200'
    mysqlConnectorVersion = '8.0.18'

    flywayVersion = '5.2.4'

    springBomVersion = '5.2.0.RELEASE'
    springBootVersion = '2.2.0.RELEASE'
    springLoadedVersion = '1.2.8.RELEASE'

//    eclipseLinkVersion = '2.7.4'
    transactionApiVersion = '1.3'

    slf4jVersion = '1.7.28'

    jaxbApiVersion = '2.3.1'
    p6spyVersion = '3.8.1'
    tomcatJdbcPoolVersion = '9.0.27'

    log4jVersion = '2.12.1'

    dbUnitVersion = '2.6.0'

    cucumberVersion = '4.8.0'

//    jerseyVersion = '2.28'

    junitVersion = '4.12'
    junit4Version        = '4.12'
    junitVintageVersion  = '5.5.2'
    junitPlatformVersion = '1.5.2'
    junitJupiterVersion  = '5.5.2'

    micronautVersion = '1.2.5'
    micronautSpringVersion = '1.2.5'

    xRayBomVersion = '2.3.0'
}

// Apply the java plugin to add support for Java
apply plugin: 'idea'

group = 'com.github.poad'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
}


subprojects {

    apply plugin: 'java'

    sourceCompatibility = 11
    targetCompatibility = 11

    dependencies {
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"

        // JUnit Jupiter API and TestEngine implementation
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

        // If you also want to support JUnit 3 and JUnit 4 tests

        testRuntimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"
        testRuntimeOnly "org.apache.logging.log4j:log4j-jul:${log4jVersion}"

        // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
        testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
    }

    test {
        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        useJUnitPlatform()

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        }
    }
}

