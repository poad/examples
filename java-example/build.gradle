/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ken-yo' at '15/11/08 7:04' with Gradle 2.6
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.6/userguide/tutorial_java_projects.html
 */
plugins {
    id "org.flywaydb.flyway" version '11.8.1' apply false
}


ext {
    jettyVersionOfDropwizard = '9.4.39.v20210325'
    jettyVersionForWebSocketServer = '9.4.40.v20210413'

    dropwizardVersion = '4.0.0'
    jerseyVersion = '3.1.1'
    jacksonVersion = '2.12.3'
    vertxVersion = '4.0.3'

    jdbiVersion = '3.49.3'
    hikariCpVersion = '4.0.3'
    h2Version = '1.4.200'
    mysqlConnectorVersion = '9.3.0'

    flywayVersion = '7.8.2'

    springBootVersion = '3.4.0'
    springLoadedVersion = '1.2.8.RELEASE'

    slf4jVersion = '2.0.17'

    p6spyVersion = '3.9.0'
    tomcatJdbcPoolVersion = '10.0.21'

    log4jVersion = '2.24.3'

    dbUnitVersion = '2.7.3'

    junitVersion = '4.13.2'
    junit4Version        = '4.13.2'
    junitVintageVersion  = '5.7.2'
    junitPlatformVersion = '1.12.2'
    junitJupiterVersion  = '5.12.2'

    xRayBomVersion = '2.9.0'
}

group = 'com.github.poad'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
}


subprojects {

    apply plugin: 'java'

    sourceCompatibility = 11
    targetCompatibility = 11

    dependencies {
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"

        // JUnit Jupiter API and TestEngine implementation
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

        // If you also want to support JUnit 3 and JUnit 4 tests

        testRuntimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"
        testRuntimeOnly "org.apache.logging.log4j:log4j-jul:${log4jVersion}"

        // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
        testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
    }

    test {
        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        useJUnitPlatform()

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        }
    }
}

